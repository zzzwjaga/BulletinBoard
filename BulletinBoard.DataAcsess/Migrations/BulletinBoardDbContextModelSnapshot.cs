// <auto-generated />
using System;
using BulletinBoard.DataAcsess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BulletinBoard.DataAcsess.Migrations
{
    [DbContext(typeof(BulletinBoardDbContext))]
    partial class BulletinBoardDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BulletinBoard.DataAcsess.Entities.AdvertisememtPictureEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("advertisementId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("content")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("fileExtension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("fileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("advertisementId");

                    b.ToTable("advertisementPictures");
                });

            modelBuilder.Entity("BulletinBoard.DataAcsess.Entities.AdvertisementEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("localityId")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("localityId");

                    b.HasIndex("userId");

                    b.ToTable("advertisement");
                });

            modelBuilder.Entity("BulletinBoard.DataAcsess.Entities.CategoryAdvertisementEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("advertisementId")
                        .HasColumnType("integer");

                    b.Property<int>("categoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("advertisementId");

                    b.HasIndex("categoryId", "advertisementId")
                        .IsUnique();

                    b.ToTable("categoriesOfAdvertisements");
                });

            modelBuilder.Entity("BulletinBoard.DataAcsess.Entities.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("BulletinBoard.DataAcsess.Entities.FavoritiesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvertisementId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdvertisementId");

                    b.HasIndex("UserId", "AdvertisementId")
                        .IsUnique();

                    b.ToTable("favorities");
                });

            modelBuilder.Entity("BulletinBoard.DataAcsess.Entities.LocalityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("localityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("localities");
                });

            modelBuilder.Entity("BulletinBoard.DataAcsess.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("registredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("BulletinBoard.DataAcsess.Entities.UserMetaDataEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("actionDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("actionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("moderatorId")
                        .HasColumnType("integer");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("moderatorId");

                    b.HasIndex("userId");

                    b.ToTable("userMetadatas");
                });

            modelBuilder.Entity("BulletinBoard.DataAcsess.Entities.AdvertisememtPictureEntity", b =>
                {
                    b.HasOne("BulletinBoard.DataAcsess.Entities.AdvertisementEntity", "advertisement")
                        .WithMany("pictures")
                        .HasForeignKey("advertisementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("advertisement");
                });

            modelBuilder.Entity("BulletinBoard.DataAcsess.Entities.AdvertisementEntity", b =>
                {
                    b.HasOne("BulletinBoard.DataAcsess.Entities.LocalityEntity", "locality")
                        .WithMany("advertisements")
                        .HasForeignKey("localityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BulletinBoard.DataAcsess.Entities.UserEntity", "user")
                        .WithMany("advertisements")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("locality");

                    b.Navigation("user");
                });

            modelBuilder.Entity("BulletinBoard.DataAcsess.Entities.CategoryAdvertisementEntity", b =>
                {
                    b.HasOne("BulletinBoard.DataAcsess.Entities.AdvertisementEntity", "advertisement")
                        .WithMany("categories")
                        .HasForeignKey("advertisementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BulletinBoard.DataAcsess.Entities.CategoryEntity", "category")
                        .WithMany("advertisements")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("advertisement");

                    b.Navigation("category");
                });

            modelBuilder.Entity("BulletinBoard.DataAcsess.Entities.FavoritiesEntity", b =>
                {
                    b.HasOne("BulletinBoard.DataAcsess.Entities.AdvertisementEntity", "advertisement")
                        .WithMany("users")
                        .HasForeignKey("AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BulletinBoard.DataAcsess.Entities.UserEntity", "user")
                        .WithMany("favorities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("advertisement");

                    b.Navigation("user");
                });

            modelBuilder.Entity("BulletinBoard.DataAcsess.Entities.UserMetaDataEntity", b =>
                {
                    b.HasOne("BulletinBoard.DataAcsess.Entities.UserEntity", "moderator")
                        .WithMany("moderatorAction")
                        .HasForeignKey("moderatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BulletinBoard.DataAcsess.Entities.UserEntity", "user")
                        .WithMany("metaDatas")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("moderator");

                    b.Navigation("user");
                });

            modelBuilder.Entity("BulletinBoard.DataAcsess.Entities.AdvertisementEntity", b =>
                {
                    b.Navigation("categories");

                    b.Navigation("pictures");

                    b.Navigation("users");
                });

            modelBuilder.Entity("BulletinBoard.DataAcsess.Entities.CategoryEntity", b =>
                {
                    b.Navigation("advertisements");
                });

            modelBuilder.Entity("BulletinBoard.DataAcsess.Entities.LocalityEntity", b =>
                {
                    b.Navigation("advertisements");
                });

            modelBuilder.Entity("BulletinBoard.DataAcsess.Entities.UserEntity", b =>
                {
                    b.Navigation("advertisements");

                    b.Navigation("favorities");

                    b.Navigation("metaDatas");

                    b.Navigation("moderatorAction");
                });
#pragma warning restore 612, 618
        }
    }
}
